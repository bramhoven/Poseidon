// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Poseidon.DataLayer.Contexts.ServerContext;

namespace Poseidon.Migrations.Mysql.Migrations.MysqlServer
{
    [DbContext(typeof(MysqlServerContext))]
    [Migration("20210107195747_AddPublicSshKey")]
    partial class AddPublicSshKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Poseidon.Models.Cloud.CloudProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CloudProviders");
                });

            modelBuilder.Entity("Poseidon.Models.Security.PublicSshKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("PublicKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("PublicSshKeys");
                });

            modelBuilder.Entity("Poseidon.Models.Servers.IpAddress", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Gateway")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Netmask")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("IpAddresses");
                });

            modelBuilder.Entity("Poseidon.Models.Servers.Server", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CloudId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CloudProviderId")
                        .HasColumnType("int");

                    b.Property<string>("InstallationScriptLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MainIpAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PublicSshKeyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CloudProviderId");

                    b.HasIndex("PublicSshKeyId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Poseidon.Models.Security.PublicSshKey", b =>
                {
                    b.HasOne("Poseidon.Models.Cloud.CloudProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Poseidon.Models.Servers.IpAddress", b =>
                {
                    b.HasOne("Poseidon.Models.Servers.Server", null)
                        .WithMany("IpAddresses")
                        .HasForeignKey("ServerId");
                });

            modelBuilder.Entity("Poseidon.Models.Servers.Server", b =>
                {
                    b.HasOne("Poseidon.Models.Cloud.CloudProvider", "CloudProvider")
                        .WithMany()
                        .HasForeignKey("CloudProviderId");

                    b.HasOne("Poseidon.Models.Security.PublicSshKey", "PublicSshKey")
                        .WithMany()
                        .HasForeignKey("PublicSshKeyId");
                });
#pragma warning restore 612, 618
        }
    }
}
